generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model genres {
  genre_id                BigInt                    @id @default(autoincrement()) @db.UnsignedBigInt
  type_id                 BigInt                    @db.UnsignedBigInt
  name                    String                    @db.VarChar(150)
  created_at              DateTime?                 @default(now()) @db.Timestamp(0)
  updated_at              DateTime?                 @default(now()) @db.Timestamp(0)
  question_types          question_types            @relation(fields: [type_id], references: [type_id], onDelete: Cascade, map: "fk_type_id")
  question_genre_mappings question_genre_mappings[]

  @@unique([type_id, name], map: "uq_genres_type_name")
  @@index([type_id, genre_id], map: "idx_genres_type")
}

model question_genre_mappings {
  question_id BigInt    @db.UnsignedBigInt
  genre_id    BigInt    @db.UnsignedBigInt
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)
  genres      genres    @relation(fields: [genre_id], references: [genre_id], onDelete: Cascade, map: "fk_qgm_genre")
  questions   questions @relation(fields: [question_id], references: [question_id], onDelete: Cascade, map: "fk_qgm_question")

  @@id([question_id, genre_id])
  @@index([genre_id, question_id], map: "idx_qgm_genre")
}

model question_types {
  type_id    BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  type_name  String    @db.VarChar(150)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  updated_at DateTime? @default(now()) @db.Timestamp(0)
  genres     genres[]
}

model questions {
  question_id             BigInt                    @id @default(autoincrement()) @db.UnsignedBigInt
  question                String                    @db.Text
  prompt                  String?                   @db.Text
  created_at              DateTime?                 @default(now()) @db.Timestamp(0)
  updated_at              DateTime?                 @default(now()) @db.Timestamp(0)
  question_genre_mappings question_genre_mappings[]
}

model users {
  user_id       BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  user_name     String              @db.VarChar(200)
  email         String              @unique(map: "uq_users_email") @db.VarChar(255)
  auth_provider users_auth_provider
  created_at    DateTime?           @default(now()) @db.Timestamp(0)
  updated_at    DateTime?           @default(now()) @db.Timestamp(0)
  last_login_at DateTime?           @db.Timestamp(0)
  otp           otp[]
}

model otp {
  otp_id       BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id      BigInt    @db.UnsignedBigInt
  otp_hash     Bytes     @db.VarBinary(64)
  salt         Bytes     @db.VarBinary(16)
  attempts     Int?      @default(0) @db.UnsignedInt
  max_attempts Int?      @default(5) @db.UnsignedInt
  created_at   DateTime? @default(now()) @db.Timestamp(0)
  expires_at   DateTime  @db.DateTime(0)
  consumed_at  DateTime? @db.DateTime(0)
  updated_at   DateTime? @default(now()) @db.Timestamp(0)
  users        users     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "otp_fk_user_id")

  @@index([expires_at], map: "idx_expiry")
  @@index([user_id, expires_at], map: "idx_user")
}

enum users_auth_provider {
  google
  facebook
}
